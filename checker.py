import zipfile
import os
import shutil
from lxml import etree
import re


def check_scorm(zip_path):
    results = []
    launch_path = None
    external_urls = set()

    tempdir = os.path.join(os.getcwd(), "extracted_scorm")
    if os.path.exists(tempdir):
        shutil.rmtree(tempdir)
    os.makedirs(tempdir, exist_ok=True)

    if not zipfile.is_zipfile(zip_path):
        return ["‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è zip-–∞—Ä—Ö–∏–≤–æ–º"], None

    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(tempdir)
    except Exception as e:
        return [f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤: {e}"], None

    manifest_path = os.path.join(tempdir, 'imsmanifest.xml')
    if not os.path.exists(manifest_path):
        results.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç imsmanifest.xml")
        return results, None
    else:
        results.append("‚úÖ –ù–∞–π–¥–µ–Ω imsmanifest.xml")

    # --- XML –ø–∞—Ä—Å–∏–Ω–≥ –∏ SCORM-–≤–µ—Ä—Å–∏—è ---
    try:
        tree = etree.parse(manifest_path)
        root = tree.getroot()

        manifest_id = root.attrib.get("identifier")
        if manifest_id:
            results.append("‚úÖ –£–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞")
        else:
            results.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç 'identifier' —É <manifest>")

        schema = root.find(".//{*}schema")
        if schema is not None and "SCORM" in schema.text:
            results.append(f"‚úÖ SCORM-—Å—Ç–∞–Ω–¥–∞—Ä—Ç: {schema.text}")
        else:
            results.append("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω SCORM schema –∏–ª–∏ –æ–Ω –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")

        version_warning = False
        schemaversion = root.find(".//{*}schemaversion")
        if schemaversion is not None:
            version = schemaversion.text.strip()
            results.append(f"‚úÖ –í–µ—Ä—Å–∏—è SCORM: {version}")
            if version == "1.2":
                results.append("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç SCORM 1.2")
            elif version.startswith("2004"):
                results.append("‚ö†Ô∏è SCORM 2004 ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
                version_warning = True
            else:
                results.append(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è SCORM: {version}")
        else:
            results.append("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è SCORM (schemaversion)")
    except Exception as e:
        results.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ imsmanifest.xml: {e}")
        return results, None

    # --- –î–µ—Ç–µ–∫—Ç–æ—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (–ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫—É—Ä—Å–∞) ---
    for f in os.listdir(tempdir):
        if f.lower().startswith("story") and f.lower().endswith(".html"):
            results.append("‚úÖ –í—ã—è–≤–ª–µ–Ω Articulate (Storyline) ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        if "ispring" in f.lower():
            if version_warning:
                results.append("‚ùå SCORM 2004 –≤ iSpring ‚Äî –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π")
            else:
                results.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω iSpring ‚Äî –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ SCORM 1.2")

    # --- –ü–æ–∏—Å–∫ –∑–∞–ø—É—Å–∫–∞–µ–º–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ ---
    resources = root.findall('.//{*}resource')
    if not resources:
        results.append("‚ùå –í –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ (<resource>)")

    for res in resources:
        href = res.get('href')
        if href:
            possible_path = os.path.join(tempdir, href)
            if os.path.exists(possible_path):
                results.append(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞: {href}")
                launch_path = possible_path
            else:
                results.append(f"‚ùå –£–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ ({href}), –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            results.append("‚ö†Ô∏è –í —Ä–µ—Å—É—Ä—Å–µ –Ω–µ —É–∫–∞–∑–∞–Ω –∞—Ç—Ä–∏–±—É—Ç href (—Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞)")

    if not launch_path:
        index_root = os.path.join(tempdir, "index.html")
        if os.path.exists(index_root):
            launch_path = index_root
            results.append("‚ö†Ô∏è –í –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –Ω–µ—Ç —Ä–∞–±–æ—á–µ–π —Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–∞–π–¥–µ–Ω index.html –≤ –∫–æ—Ä–Ω–µ –∞—Ä—Ö–∏–≤–∞")
        elif os.path.exists(os.path.join(tempdir, "res", "index.html")):
            launch_path = os.path.join(tempdir, "res", "index.html")
            results.append("‚ö†Ô∏è –í –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –Ω–µ—Ç —Ä–∞–±–æ—á–µ–π —Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–∞–π–¥–µ–Ω index.html –≤ –ø–∞–ø–∫–µ /res")
        else:
            for root_dir, _, files in os.walk(tempdir):
                for file in files:
                    if file.lower() == "index.html":
                        launch_path = os.path.join(root_dir, file)
                        relative = os.path.relpath(launch_path, tempdir)
                        results.append(f"‚ö†Ô∏è –í –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –Ω–µ—Ç —Ä–∞–±–æ—á–µ–π —Å—Å—ã–ª–∫–∏, –Ω–æ –Ω–∞–π–¥–µ–Ω index.html: {relative}")
                        break
                if launch_path:
                    break

    # --- –ü–æ–∏—Å–∫ SCORM API –≤—ã–∑–æ–≤–æ–≤ –∏ –≤–Ω–µ—à–Ω–∏—Ö URL ---
    scorm_calls = {
        "LMSInitialize": [],
        "Initialize(": [],
        "LMSFinish": [],
        "Terminate(": [],
        "LMSSetValue": [],
        "SetValue(": [],
        "LMSCommit": [],
        "Commit(": []
    }

    tracking_patterns = [
        "cmi.core.lesson_location",
        "cmi.suspend_data",
        "lesson_status",
        "success_status",
        "completed",
        "incomplete",
        "passed",
        "failed",
        "score.raw",
        "score.max",
        "score.min",
        "session_time"
    ]

    tracking_flags = {k: 0 for k in tracking_patterns}
    setvalue_count = 0
    url_pattern = re.compile(r'https?://[^\s\'"<>]+')

    for root_dir, _, files in os.walk(tempdir):
        for file in files:
            if file.endswith(('.js', '.html', '.htm', '.xml')):
                full_path = os.path.join(root_dir, file)
                try:
                    with open(full_path, "r", encoding="utf-8", errors="ignore") as f:
                        content = f.read()

                        for call in scorm_calls:
                            if call in content:
                                relative_path = os.path.relpath(full_path, tempdir)
                                if relative_path not in scorm_calls[call]:
                                    scorm_calls[call].append(relative_path)
                        setvalue_count += content.count("SetValue")

                        for pattern in tracking_patterns:
                            if pattern in content:
                                tracking_flags[pattern] += 1

                        matches = url_pattern.findall(content)
                        for url in matches:
                            if not url.startswith("file://"):
                                external_urls.add(url.strip())
                except Exception as e:
                    results.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file}: {e}")

    found_any = False
    for call, files in scorm_calls.items():
        if files:
            found_any = True
            results.append(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤—ã–∑–æ–≤ {call} –≤:")
            for f in files:
                results.append(f"   ‚îî‚îÄ {f}")
    if not found_any:
        results.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ SCORM API (LMSInitialize, LMSFinish, SetValue, Commit)")

    method_used = []
    if tracking_flags["completed"] or tracking_flags["incomplete"]:
        method_used.append("completed/incompleted")
    if tracking_flags["passed"] or tracking_flags["failed"]:
        method_used.append("passed/failed")

    if len(method_used) == 2:
        results.append("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ (completed –∏ passed)")
    elif method_used:
        results.append(f"‚úÖ –ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞: {method_used[0]}")
    else:
        results.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (completed/incomplete –∏–ª–∏ passed/failed)")

    if setvalue_count > 100:
        results.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ–ª–µ–µ 100 –≤—ã–∑–æ–≤–æ–≤ SetValue ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ SCORM 1.2")

    if external_urls:
        results.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å):")
        for url in sorted(external_urls):
            results.append(f"   ‚îî‚îÄ üåê {url}")
    else:
        results.append("‚úÖ –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî –∫—É—Ä—Å, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω")

    # üìä –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    tracked = [k for k, v in tracking_flags.items() if v > 0]
    if tracked:
        results.append("\nüìä –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ LMS –¥–∞–Ω–Ω—ã–µ:")
        for key in tracked:
            results.append(f"   ‚îî‚îÄ {key} ({tracking_flags[key]} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)")
    else:
        results.append("üìä –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ (SCORM tracking variables)")

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
    if tracked:
        import json
        json_data = {
            "scorm_variables_used": {
                k: tracking_flags[k] for k in tracked
            }
        }
        with open("scorm_data.json", "w", encoding="utf-8") as jf:
            json.dump(json_data, jf, indent=4, ensure_ascii=False)

    return results, launch_path


def generate_html_report(log_lines, output_path="scorm_report.html"):
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("<!DOCTYPE html><html><head><meta charset='utf-8'>")
        f.write("<title>SCORM Report</title>")
        f.write("""
        <style>
            body { font-family: monospace; padding: 20px; background: #f8f8f8; }
            .ok    { color: green; }
            .warn  { color: orange; }
            .err   { color: red; }
            .line  { margin-bottom: 4px; }
        </style>
        </head><body>
        <h2>–û—Ç—á—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ SCORM-–∫—É—Ä—Å–∞</h2>
        <hr>
        """)

        for line in log_lines:
            cls = "line"
            if "‚úÖ" in line:
                cls += " ok"
            elif "‚ö†Ô∏è" in line:
                cls += " warn"
            elif "‚ùå" in line:
                cls += " err"
            f.write(f"<div class='{cls}'>{line}</div>\n")

        f.write("</body></html>")
